% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rejection_sampling.R
\name{rejection_sampling}
\alias{rejection_sampling}
\title{Rejection Sampling}
\usage{
rejection_sampling(f_den, g_den, g, M)
}
\arguments{
\item{f_den}{S3 object of class \code{\link{Density}}; the probability density
to construct the sampler for.}

\item{g_den}{S3 object of class \code{Density}; the probability density for
the sampler given in \code{g}.}

\item{g}{\code{R} function with single numeric argument; the random number
generator that draws samples from the density function \code{g_den}.}

\item{M}{strictly positive numeric scalar; satisfies \code{f(x) <= M*g(x)}
for all numeric scalar inputs \code{x}.}
}
\value{
A function taking a single numeric scalar argument \code{n},
returning \code{n} \code{f-den} distributed random numbers.
}
\description{
The \code{rejection_sampling} function operator creates a function that draws
samples from a given probability density function.
}
\details{
Rejection sampling uses \code{g} to draw samples and accepts/rejects
these samples according to the densities \code{f_gen} and \code{g_den},
such that the resulting samples are \code{f_den}-distributed. Many rejected
samples result in longer runtimes. To prevent this \code{M} should be
chosen as small as possible, satisfying \code{f_den$fun(x) <=
  M*g_den$fun(x)} for all numeric scalar inputs \code{x}.
}
\examples{
custom_den <- function(x) {
  ret <- 1 + sin(2*pi*x)
  ret[x < 0 | 1 < x] <- 0
  ret
}

f_den <- Density(custom_den, c(0,1))
g_den <- Density(dunif)

custom_sampler <- rejection_sampling(f_den, g_den, runif, 2)
x <- seq(-0.5, 1.5, by=0.01)
y <- f_den$fun(x)

plot(x, y, type="l", main="Custom density: 1 + sin(2*pi*x)", ylab="density")
n <- 65
points(custom_sampler(65), rep(0, n), col="red", pch=".", cex=0.5)
legend("topright",
       legend=c("f_den", "samples"),
       col=c("black", "red", "blue"),
       pch=c("-", "."))

}
\seealso{
\code{\link{Density}} for more information about densities.
}
