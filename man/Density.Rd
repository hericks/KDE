% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/density.R
\name{Density}
\alias{Density}
\title{Densities}
\usage{
Density(fun, support = NULL, subdivisions = 1000L, ...)
}
\arguments{
\item{fun}{a \code{R} function taking a single numeric argument and returning
a numeric vector of the same length. See 'Details' for further
requirements.}

\item{support}{numerical vector of length 2; the lower- and upper bound of
the compact support in the first and second entry respectively. In
particular non-finite values are prohibited. \code{IntegrableFunction} will
try to find bounds on the support itself if \code{NULL} is passed.}

\item{subdivisions}{positive numeric scalar; the subdivisions parameter for
the function \code{\link{integrate_primitive}}.}

\item{...}{additional parameters to keep fixed during the evaluation of
\code{fun}.}
}
\description{
The S3 class \code{Density} tries to ensure some of the
properties of densities and is a subclass \code{\link{IntegrableFunction}}
(see: 'Details' for exact requirements).
}
\details{
A density function is a real valued, non-negative, integrable
function, such that its integral over the real numbers equals one. Density
functions as \code{R} functions are required to
\enumerate{
\item be vectorised in its argument, taking a single numeric argument,
returning a numerical vector of the same length only,
\item return zero for inputs outside their compact support,
\item return non-negative values for inputs inside their support,
\item can be integrated over their support using \code{integrate_primitive}
and the given number of subdivisions (the relative error converges),
\item yield an integral of nearly 1 (absolute error < 1\%).
}

See the 'Details' section of \code{\link{IntegrableFunction}} for comments
on the restrictiveness of compact supports.

The S3 class \code{Density} exists to ensure some of the most basic
properties of density functions. The class is build on
\code{\link[KDE:IntegrableFunction]{IntegrableFunctions}} and inherits its
structure.

The constructor \code{Density} tries to construct a valid \code{Density}
object based on the passed arguments. Returned objects are guaranteed to
pass the validator \code{\link{validate_Density}}.

\bold{Attention:} This does not guarantee the conditions in the first
'Details' paragraph: see \code{validate_Density}.
}
\examples{
dens_norm <- Density(dnorm, c(-15, 15))
dens_unif <- Density(dunif)
x <- seq(from = -4, to = 4, length.out = 1000)
plot(x, dens_norm$fun(x),
     xlim=c(-5,5), ylim=c(0,1),
     main="Densities", xlab="", ylab="",
     col="black", type="l")
lines(x,dens_unif$fun(x), col="red")
legend("topright",
       legend=c("dens_norm", "dens_unif"),
       col=c("black","red"), lty=1, cex=0.8)

}
\seealso{
\code{\link{validate_Density}} for the corresponding validator,
\code{\link{IntegrableFunction}} for more information about the superclass.
}
