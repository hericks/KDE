% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kernel.R
\name{Kernel}
\alias{Kernel}
\title{Kernel}
\usage{
Kernel(fun, support = NULL, subdivisions = 100L)
}
\arguments{
\item{fun}{a \code{R} function taking a single numeric argument and returning
a numeric vector of the same length. See 'Details' for further
requirements.}

\item{support}{a numerical vector of length 2 containing the lower- and
upperbound in the first and second entry respectively.
\code{IntegrableFunction} will try to find bounds on the support itself if
\code{NULL} is passed.}

\item{subdivisions}{a positive numeric vector of length 1, used for the
subdivisions parameter for the function
\code{\link[stats::integrate]{integrate}}.}
}
\description{
The kernels are the core of the KDE package.
The S3 Class \code{Kernel} tries to ensure some of the properties of kernels
and is a subclass of the \code{\link{IntegrableFunctions}}
(see: 'Details' for exact requirements).
}
\details{
{
A kernel function is a real valued, integrable function, such that its integral over the real numbers equals one.
Kernel functions as \code{R} functions are required to
\enumerate{
\item be vectorised in its argument, taking a single numeric argument,
returning a numerical vector of the same length only,
\item return zero for inputs outside their support,
\item can be integrated over their support using \code{\link{integrate}} and the
given number ofsubdivisions without throwing an error.
\item yield an integral of 1.
}

The S3 class \code{Kernel} exists to ensure some of the most
basic properties of kernel functions. The class is build on \code{\link{IntegrableFunctions}}.

The constructor \code{Kernel} tries to construct a valid
\code{Kernel} object based on the passed arguments. Returned
objects are guaranteed to pass the validator \code{\link{[validate_Kernel]}}.

\bold{Attention:} This does not guarantee the conditions in the first
'Details' paragraph: see \code{validate_Kernel}.

\strong{List of built-in kernels functions:}
\describe{
\item{\code{\link{rectangular}}}{}
\item{\code{\link{triangular}}}{}
\item{\code{\link{epanechnikov}}}{}
\item{\code{\link{biweight}}}{}
\item{\code{\link{triweight}}}{}
\item{\code{\link{tricube}}}{}
\item{\code{\link{gaussian}}}{}
\item{\code{\link{cosine}}}{}
\item{\code{\link{logistic}}}{}
\item{\code{\link{sigmoid_function}}}{}
\item{\code{\link{silverman}}}{}
}
}
}
\examples{
rectangular_function <- function(u){
  check_kernel_conditions(u)
  return(1/2*(abs(u) <= 1))
}
rectangular_ker <- Kernel(rectangular_function, support=c(-1,1))
x <- seq(from = -4, to = 4, length.out = 1000)
plot(x, gaussian$fun(x),
     xlim=c(-5,5), ylim=c(0,1),
     main="Kernels", xlab="", ylab="",
     col="black", type="l")
lines(x,triangular$fun(x), col="red")
lines(x, rectangular_ker$fun(x), col="blue")
legend("topright",
       legend=c("gaussian", "triangular","rectangular"),
       col=c("black","red", "blue"), lty=1, cex=0.8)

}
\seealso{
\code{\link{validate_Kernel}}, \code{\link{IntegrableFunction}}
}
