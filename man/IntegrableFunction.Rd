% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/integrable_function.R
\name{IntegrableFunction}
\alias{IntegrableFunction}
\title{Integrable Functions}
\usage{
IntegrableFunction(fun, support = NULL, subdivisions = 1000L, ...)
}
\arguments{
\item{fun}{a \code{R} function taking a single numeric argument and returning
a numeric vector of the same length. See 'Details' for further
requirements.}

\item{support}{numerical vector of length 2; the lower- and upper bound of
the compact support in the first and second entry respectively. In
particular non-finite values are prohibited. \code{IntegrableFunction} will
try to find bounds on the support itself if \code{NULL} is passed.}

\item{subdivisions}{positive numeric scalar; the subdivisions parameter for
the function \code{\link{integrate_primitive}}.}

\item{...}{additional parameters to keep fixed during the evaluation of
\code{fun}.}
}
\description{
Many functions of the \code{KDE} package work with densities and
kernels, which are integrable in the mathematical sense. See 'Details' for
exact requirements. The S3 class \code{IntegrableFunction} tries to ensure
some of the properties of integrable functions and serves as superclass for
the more specific S3 classes \code{Density} and \code{Kernel}.
}
\details{
Integrable functions as \code{R} functions are required to
\enumerate{
\item be vectorised in its argument, taking a single numeric argument,
returning a numerical vector of the same length only,
\item return zero for inputs outside their compact support,
\item can be integrated over their support using \code{integrate_primitive}
and the given number of subdivisions (the relative error converges).
}

Notice that a compact support may sound like a strong restriction, but
since every integrable function is near zero outside of a compact set this
is computatianlly always given for integrable functions.

The functions in this package don't just take \code{R} functions satisfying
these conditions, but objects of S3 class \code{IntegrableFunction} (or one
of its subclasses \code{Kernel}, \code{Density}).

The S3 class \code{IntegrableFunction} exists to ensure some of the most
basic properties of integrable functions. The class is build on lists
containing three named entries \code{fun}, \code{support} and \code{subdivisions}
\itemize{
\item \strong{\code{fun}} is a \code{R} function (the represented function) taking a
single numeric argument (additional to the fixed arguments in \code{...})
and returning a numeric vector of the same length. This function should
return near zero outside of the interval given in the \code{support} entry.
\item \strong{\code{support}} is a numeric vector of length 2 containing a lower-
and upperbound for the support of the function stored in \code{fun} in its
first and second entry respectively. In particular the values \code{-Inf}
and \code{Inf} are allowed.
\item \strong{\code{subdivisions}} is a positive numeric scalar used as the
subdivisions parameter for \code{\link{integrate_primitive}}. The function
\code{fun} should be integrable (the relative error converges). Therefore
the subdivisions parameter should to be large enough, such that
\code{integrate_primitive} yields a sufficiently accurate result.
}

The constructor \code{IntegrableFunction} tries to construct a valid
\code{IntegrableFunction} object based on the passed arguments. Returned
objects are guaranteed to pass the validator \code{validate_IntegrableFunction}.

\bold{Attention:} This does not guarantee the conditions in the first
'Details' paragraph. See \code{\link{validate_IntegrableFunction}} for further
information.
}
\seealso{
\code{\link{integrate_primitive}} for the integration method used,
\code{\link{Kernel}}/\code{\link{Density}} for more information about
kernels/densities.
}
